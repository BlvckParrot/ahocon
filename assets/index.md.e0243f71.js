import{_ as s,c as a,o as n,a as l}from"./app.8289b53b.js";const A=JSON.parse('{"title":"getting started","description":"","frontmatter":{},"headers":[{"level":2,"title":"what is AHOCON?","slug":"what-is-ahocon","link":"#what-is-ahocon","children":[]},{"level":2,"title":"where can I use AHOCON?","slug":"where-can-i-use-ahocon","link":"#where-can-i-use-ahocon","children":[]},{"level":2,"title":"install","slug":"install","link":"#install","children":[{"level":3,"title":"pnpm","slug":"pnpm","link":"#pnpm","children":[]},{"level":3,"title":"npm","slug":"npm","link":"#npm","children":[]},{"level":3,"title":"yarn","slug":"yarn","link":"#yarn","children":[]}]},{"level":2,"title":"use","slug":"use","link":"#use","children":[]},{"level":2,"title":"typescript","slug":"typescript","link":"#typescript","children":[]}],"relativePath":"index.md"}'),o={name:"index.md"},p=l(`<p><img src="https://img.shields.io/github/package-json/v/steve-py96/ahocon?style=flat-square&amp;color=000000" alt="GitHub package.json version"><img src="https://img.shields.io/bundlephobia/minzip/ahocon?style=flat-square&amp;color=000000" alt="npm bundle size"></p><h1 id="getting-started" tabindex="-1">getting started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><h2 id="what-is-ahocon" tabindex="-1">what is AHOCON? <a class="header-anchor" href="#what-is-ahocon" aria-hidden="true">#</a></h2><p>AHOCON (short for Another HOCON, or something \u{1F1EF}\u{1F1F5} + \u{1F1EA}\u{1F1F8}?) is a custom implementation of the <a href="https://github.com/lightbend/config/blob/master/HOCON.md" target="_blank" rel="noreferrer">HOCON grammar</a>. The goal is to provide a dead simple grammar to write configurations in and of course a parser to parse that configuration to a usable format (aka JSON). AHOCON is also extendable via custom functions (more about this in the <a href="/ahocon/advanced.html">advanced section</a>) later.</p><h2 id="where-can-i-use-ahocon" tabindex="-1">where can I use AHOCON? <a class="header-anchor" href="#where-can-i-use-ahocon" aria-hidden="true">#</a></h2><ul><li>Browser</li><li>Node</li><li>...? (not tested in more runtimes yet)</li></ul><h2 id="install" tabindex="-1">install <a class="header-anchor" href="#install" aria-hidden="true">#</a></h2><h3 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">pnpm add ahocon</span></span>
<span class="line"></span></code></pre></div><h3 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install ahocon</span></span>
<span class="line"></span></code></pre></div><h3 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">yarn add ahocon</span></span>
<span class="line"></span></code></pre></div><h2 id="use" tabindex="-1">use <a class="header-anchor" href="#use" aria-hidden="true">#</a></h2><p>Import the <code>parse</code> function from the previously installed <a href="https://www.npmjs.com/package/ahocon" target="_blank" rel="noreferrer"><code>ahocon</code></a> package and use it on your configuration (which needs to be a string). It will return an object representing your configuration.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ahocon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myConfig </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example = true /* comment */</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myConfig)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// logs { &quot;example&quot;: true }</span></span>
<span class="line"></span></code></pre></div><h2 id="typescript" tabindex="-1">typescript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h2><p>AHOCON is built in typescript, therefore it naturally supports typecasting on the parse.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ahocon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">example</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myConfig </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyConfig</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example = true /* comment */</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myConfig)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// logs { &quot;example&quot;: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TypeofMyConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> myConfig</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// shows MyConfig</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>AHOCON is not a type / schema checker. Consider using <a href="https://www.npmjs.com/package/zod" target="_blank" rel="noreferrer">zod</a> or similar if the configuration isn&#39;t static or comes from a user and needs to be validated.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ahocon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">z</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zod</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> schema </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> z</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">object</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">example</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> z</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">boolean</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">strict</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// don&#39;t allow other keys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myConfig </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">z</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">infer</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#A6ACCD;"> schema</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example = true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// type { example: boolean }</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> evilUserConfig </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">z</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">infer</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#A6ACCD;"> schema</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example = 123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// type { example: boolean }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">schema</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(myConfig)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// all good</span></span>
<span class="line"><span style="color:#A6ACCD;">schema</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(evilUserConfig)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// ZodError</span></span>
<span class="line"></span></code></pre></div></div>`,20),e=[p];function t(r,c,i,y,D,C){return n(),a("div",null,e)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
